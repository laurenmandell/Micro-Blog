{{! Use the main layout }}
{{!< main }} <div class="profile-container">
  <div class="profile-avatar">
    <!-- Correct path for the default avatar image -->
    <img src="/avatar/{{user.username}}" alt="User Avatar">
  </div>

  <section class="profile-info">
    <!-- user profile info -->
    <h2>{{user.username}}'s Profile</h2>
    <p>Member since: {{user.memberSince}}</p>
    <button class="delete-account-button">Delete Account</button>
    <div class="confirm-delete">
      <p>Are you sure?</p>
      <button class="cancel-delete-button">No</button>
      <button class="confirm-delete-button">Yes</button>
    </div>
  </section>
  </div>

  <section class="user-posts">
    <!-- you can call posts tweets, or truths, or whatever, these are neologisms. Choose your own new in server.js -->
    <h2>Your {{{postNeoType}}}s</h2>

    <form action="/profile" method="GET" class="sort-container">
      <label for="sortPosts">Sort by:</label>
      <select class="sortPosts" name="sort" onchange="this.form.submit()">
        <option value="recency-desc" {{#ifCond sort 'recency-desc' }}selected{{/ifCond}}>Recency: New to Old</option>
        <option value="recency-asc" {{#ifCond sort 'recency-asc' }}selected{{/ifCond}}>Recency: Old to New</option>
        <option value="likes-desc" {{#ifCond sort 'likes-desc' }}selected{{/ifCond}}>Number of Likes: High to Low
        </option>
        <option value="likes-asc" {{#ifCond sort 'likes-asc' }}selected{{/ifCond}}>Number of Likes: Low to High</option>
      </select>
    </form>

    <!-- you'll need to make this conditaionl and #each expression work -->
    {{#if posts.length}}
    <ul>
      {{#each posts}}
      {{> post this user=../user}}
      {{/each}}
    </ul>
    {{else}}
    <!-- fix this up with some helper functions and other handlebars expressions, or add you own character -->
    <p>You have not posted yet, poster.</p>
    {{/if}}
  </section>
  <script>
    var deleteAccountButton = document.querySelector(".delete-account-button");
    var confirmDeleteDiv = document.querySelector(".confirm-delete");
    var confirmDeleteBtn = document.querySelector(".confirm-delete-button");
    var cancelDeleteBtn = document.querySelector(".cancel-delete-button");

    deleteAccountButton.onclick = function () {
      confirmDeleteDiv.style.display = "block";
    }

    cancelDeleteBtn.onclick = function () {
      confirmDeleteDiv.style.display = "none";
    }

    confirmDeleteBtn.onclick = function () {
      fetch("/deleteAccount", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json"
        }
      }).then(response => {
        if (response.ok) {
          window.location.href = "/logout";
        } else {
          alert("There was an error deleting your account. Please try again.");
        }
      }).catch(error => {
        console.error("Error:", error);
        alert("There was an error deleting your account. Please try again.");
      });
    }

    /*
     You want to show a subset of the emojis. About 200. However,
     you also want the user to be able to search all emojis,
     so, put them in this array when the array is empty so
     that you have them.
    */

    let allEmojis = [];  // Global list to hold all emojis

    async function fetchEmojis(event) {
      try {
        const response = await fetch('/api/emojis');
        const emojis = await response.json();
        allEmojis = emojis
        displayEmojis(event, emojis);
      } catch (error) {
        console.error('Failed to fetch emojis', error);
      }
    }

    function toggleEmojiPanel(event) {
      function findEmojiContainer(element) {
        let parent = element.closest('.post-form');
        if (parent) {
          return parent.querySelector('.emoji-container');
        }
        return null;
      }
      const container = findEmojiContainer(event.target);
      container.style.display = container.style.display === 'none' ? 'block' : 'none';


      if (container.style.display === 'block' && allEmojis.length == 0) {
        // go "Fetch" you some emojis and show them off with displayEmojis
        fetchEmojis(event);
      }
    }

    function displayEmojis(event, emojis, limit = 200) {
      function findEmojiGrid(element) {
        let parent = element.closest('.post-form');
        if (parent) {
          return parent.querySelector('.emoji-grid');
        }
        return null;
      }
      const container = findEmojiGrid(event.target);
      container.innerHTML = '';  // Clear previous results
      if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
          const emojiElement = document.createElement('span');
          emojiElement.textContent = emoji.character;
          emojiElement.title = emoji.slug;  // Showing the emoji name on hover
          emojiElement.style.cursor = 'pointer';
          emojiElement.style.fontSize = '24px';
          emojiElement.style.margin = '5px';
          emojiElement.onclick = () => insertEmoji(event, emoji.character);
          container.appendChild(emojiElement);
        });
      } else {
        container.textContent = 'No emojis found. Try a different search!';
      }
    }

    function searchEmojis(event) {
      function findEmojiSearch(element) {
        let parent = element.closest('.post-form');
        if (parent) {
          return parent.querySelector('.emoji-search');
        }
        return null;
      }
      const searchTerm =
        findEmojiSearch(event.target).value.toLowerCase();
      // array.filter takes a predicate
      // use string.includes.

      const filteredEmojis = allEmojis.filter(emoji => emoji.slug.toLowerCase().includes(searchTerm));

      displayEmojis(event, filteredEmojis);
    }

    function insertEmoji(event, emoji) {
      // put an emoji on a form somehow.

      // do this when you're doing getting the emoji on the form
      //
      function findTextArea(element) {
        let parent = element.closest('.post-form');
        if (parent) {
          return parent.querySelector('textarea');
        }
        return null;
      }
      const textarea = findTextArea(event.target);

      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const text = textarea.value;
      textarea.value = text.slice(0, start) + emoji + text.slice(end);
      textarea.selectionStart = textarea.selectionEnd = start + emoji.length;

      textarea.focus();  // Keep focus on the textarea
    }
  </script>
