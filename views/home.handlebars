{{! Use the main layout }}
{{!< main }} {{! New Post Submission Form }} <section class="content-container">
  {{#if loggedIn}}
  <!-- show the create post form when logged in -->
  <h1>Create A New Post</h1>
  <section class="post-form">
    <img src="/avatar/{{user.username}}" alt="User Avatar" class="header-avatar">
    <!-- make a header here -->
    <form action="/posts" method="POST">
      <!-- title input field name = "title" -->
      <input type="text" name="title" placeholder="Title" required>
      <!-- text area input field name = "content" -->
      <textarea name="content" placeholder="What's on your mind?" required></textarea>

      <div class="form-actions">
        <button type="button" class="emoji-button" onclick="toggleEmojiPanel(event)">ðŸ˜€</button>
        <button type="submit" class="post-button">Post</button>
      </div>
    </form>

    <div class="emoji-container emoji-panel" style="display: none;">
      <!-- input field for the emoji search, use
                oninput="searchEmojis() -->
      <input type="text" class="emoji-search" placeholder="Search emojis..." oninput="searchEmojis(event)">
      <!-- a div, id = "emoji-grid" -->
      <div class="emoji-grid"></div>
    </div>
  </section>
  {{/if}}

  <h1>Recent Posts</h1>

  <form action="/" method="GET" class="sort-container">
    <label for="sortPosts">Sort by:</label>
    <select class="sortPosts" name="sort" onchange="this.form.submit()">
      <option value="recency-desc" {{#ifCond sort 'recency-desc' }}selected{{/ifCond}}>Recency: New to Old</option>
      <option value="recency-asc" {{#ifCond sort 'recency-asc' }}selected{{/ifCond}}>Recency: Old to New</option>
      <option value="likes-desc" {{#ifCond sort 'likes-desc' }}selected{{/ifCond}}>Number of Likes: High to Low</option>
      <option value="likes-asc" {{#ifCond sort 'likes-asc' }}selected{{/ifCond}}>Number of Likes: Low to High</option>
    </select>
  </form>


  <section class="posts-list">
    <!-- recent posts -->

    {{#if posts.length}}
    <ul>
      {{#each posts}}
      <!-- you have to pass the user in to posts and this is the syntax -->
      {{> post this user=../user}}
      {{/each}}
    </ul>
    {{else}}
    <!-- no posts, oh no, what now? -->
    <p>No posts yet. Be the first to post something!</p>
    {{/if}}
  </section>
  </section>


  {{! JavaScript for Emoji Integration }}
  <script>

    /*
     You want to show a subset of the emojis. About 200. However,
     you also want the user to be able to search all emojis,
     so, put them in this array when the array is empty so
     that you have them.
    */

    let allEmojis = [];  // Global list to hold all emojis

    async function fetchEmojis(event) {
      try {
        const response = await fetch('/api/emojis');
        const emojis = await response.json();
        allEmojis = emojis
        displayEmojis(event, emojis);
      } catch (error) {
        console.error('Failed to fetch emojis', error);
      }
    }

    function toggleEmojiPanel(event) {
      function findEmojiContainer(element) {
        let parent = element.closest('.post-form');
        if (parent) {
          return parent.querySelector('.emoji-container');
        }
        return null;
      }
      const container = findEmojiContainer(event.target);
      container.style.display = container.style.display === 'none' ? 'block' : 'none';


      if (container.style.display === 'block' && allEmojis.length == 0) {
        // go "Fetch" you some emojis and show them off with displayEmojis
        fetchEmojis(event);
      }
    }

    function displayEmojis(event, emojis, limit = 200) {
      function findEmojiGrid(element) {
        let parent = element.closest('.post-form');
        if (parent) {
          return parent.querySelector('.emoji-grid');
        }
        return null;
      }
      const container = findEmojiGrid(event.target);
      container.innerHTML = '';  // Clear previous results
      if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
          const emojiElement = document.createElement('span');
          emojiElement.textContent = emoji.character;
          emojiElement.title = emoji.slug;  // Showing the emoji name on hover
          emojiElement.style.cursor = 'pointer';
          emojiElement.style.fontSize = '24px';
          emojiElement.style.margin = '5px';
          emojiElement.onclick = () => insertEmoji(event, emoji.character);
          container.appendChild(emojiElement);
        });
      } else {
        container.textContent = 'No emojis found. Try a different search!';
      }
    }

    function searchEmojis(event) {
      function findEmojiSearch(element) {
        let parent = element.closest('.post-form');
        if (parent) {
          return parent.querySelector('.emoji-search');
        }
        return null;
      }
      const searchTerm =
        findEmojiSearch(event.target).value.toLowerCase();
      // array.filter takes a predicate
      // use string.includes.

      const filteredEmojis = allEmojis.filter(emoji => emoji.slug.toLowerCase().includes(searchTerm));

      displayEmojis(event, filteredEmojis);
    }

    function insertEmoji(event, emoji) {
      // put an emoji on a form somehow.

      // do this when you're doing getting the emoji on the form
      //
      function findTextArea(element) {
        let parent = element.closest('.post-form');
        if (parent) {
          return parent.querySelector('textarea');
        }
        return null;
      }
      const textarea = findTextArea(event.target);

      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const text = textarea.value;
      textarea.value = text.slice(0, start) + emoji + text.slice(end);
      textarea.selectionStart = textarea.selectionEnd = start + emoji.length;

      textarea.focus();  // Keep focus on the textarea
    }
  </script>
